<?php
namespace WP_Parser_Validate;

use Psr\Log\LoggerAwareInterface;
use Psr\Log\LoggerAwareTrait;
use Psr\Log\NullLogger;

/**
 * Handles creating and updating posts from (functions|classes|files) generated by phpDoc.
 */
class Importer implements LoggerAwareInterface {

	use LoggerAwareTrait;

	/**
	 * Validate.
	 *
	 * @access private
	 *
	 * @var object Validator object.
	 */
	private $validator;

	/**
	 * Validate parsed data.
	 *
	 * Todo: skip @ignored functions.
	 * Todo: add sleep calls.
	 *
	 * @param array   $data                       Parsed file(s) data.
	 * @param bool    $skip_sleep                 Optional; defaults to false. If true, the sleep() calls are skipped.
	 * @param bool    $validate_ignored_functions Optional; defaults to false. If true, functions marked `@ignore` will be validated.
	 */
	public function validate( $data, $skip_sleep = false, $validate_ignored_functions = false ) {

		$this->validator = new Validate;
		$this->validator->logger->set_format( 'wp-cli' );

		$this->logger->info( 'Starting validation. This will take some time' );

		$time_start   = microtime( true );
		$file_number  = 1;
		$num_of_files = count( $data );

		// Files from wp-content and third party libraries are excluded.
		// Get number of files (with excluded files subtracted).
		foreach ( $data as $file ) {
			if ( exclude_file( $file ) ) {
				$num_of_files--;
			}
		}

		foreach ( $data as $file ) {
			if ( exclude_file( $file ) ) {
				continue;
			}

			$this->logger->info( sprintf( 'Processing file %1$s of %2$s "%3$s".', number_format_i18n( $file_number ), number_format_i18n( $num_of_files ), $file['path'] ) );
			$file_number ++;

			$this->validator->validate_file( $file );
			$this->display_logs();
			$this->validator->flush_log();
			printf( "\n" );
		}

		$time_end = microtime( true );
		$time = $time_end - $time_start;

		$this->logger->info( 'Time: '.$time );
		if ( empty( $this->errors ) ) {
			$this->logger->notice( 'Validation complete!' );
		} else {
			$this->logger->info( 'Validation complete, but some errors were found:' );

			foreach ( $this->errors as $error ) {
				$this->logger->error( $error );
			}
		}
	}

	/**
	 * Display log messages.
	 *
	 * @access protected
	 */
	protected function display_logs() {
		$out = '';
		$logs = $this->validator->get_log();

		if ( empty( $logs ) ) {
			return;
		}

		foreach ( $logs as $key => $log ) {
			$type = explode( '::', $key, 2 );
			$type = ( isset( $type[0] ) && $type[0] ) ? $type[0] : '';

			foreach ( $log as $msg ) {
				$msg = exclude_message( $msg, $type );
				$msg = trim( $msg );
				if ( $msg ) {
					$_type = $type ? str_pad( $type . ': ', 10 ) : '';
					$this->logger->info( $_type . $msg );
				}
			}
		}
	}
}
